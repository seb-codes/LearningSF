public class Learning_Functions {
    
    // this is the CONSTRUCTOR\
    // new Learning_Functions(); <- To run the Constructor
    public Learning_Functions(){
        MethodOne();
        MethodTwo();
        MethodThree();
        MethodFour();
    }

    public static void MethodOne(){
        integer argone = 3;
        integer argtwo = 6;
        integer argthree = argone + argtwo;
        system.debug('My First Equation: ' + argthree);        
    }
    
    public static void MethodTwo(){
        String boi = 'hi';
        String girl = 'world';
        string sum = boi + girl;
        system.debug('My First String: ' + sum);
    }

    public static void MethodThree(){
        String withnum = '3';
        integer num = 7;
        integer sum = Integer.valueOf(withnum) + num;
        system.debug('OH GOD NO: ' + sum);      
    }
    
    public static void MethodFour(){
        String withnum = '3';
        integer num = 7;
        String sum = String.valueOf(num) + withnum;
        system.debug('OH GOD YES: ' + sum);      
    }
    
    public static void CreateLead(){   
        Lead l = new Lead();
        l.Company = 'My new Company';
        l.FirstName = 'Sebastian';
        l.LastName = 'Steele';
        l.Status = 'Open';
        insert l;       
    }
    
    public static void EmptyStringList(){
        List<String> Emp = new List<String>();
        Emp.add('Add_something to the string');
        System.debug('HERE IS YOUR LIST BRO' + Emp);
    }
    
    public static List<Integer> EmptyIntList(){
		List<Integer> Emp_int = new List<Integer>();
        Emp_int.add(99);
        Emp_int.add(66);
        System.debug('HERE IS YOUR LIST BRO' + Emp_int);
        System.debug(Emp_int.get(0));
        System.debug(Emp_int[0]);
        return Emp_int;
    }
    
    public static void AllAccounts(){
        List<Account> a = [SELECT Id, Name FROM Account];
        List<Account> a1 = [SELECT Id FROM Account];
        List<Account> a2 = [SELECT Id FROM Account];
        List<Account> a3 = [Select Id from Account];
        List<Account> a4 = [select Id from Account];
        List<Account> a5 = [select id from account];
        List<account> a6 = [select id from account];
        list<account> a7 = [select id from account];
        list<account> a8 = [select id from account];
        list<account> a9 = [select id from account];
        list<account> a10 = [select id from account];
           
        
        for(Account acc: a){
            System.debug('HERE WE GO BOI' + acc);
        }
        
        System.debug('HERES SOME ACCOUNT YOU WANTED' + a[0]);      
    }
    
    public static void FirstMap(){
        Map<Integer, String> m = new Map<Integer, String>();
        m.put(1, 'First entry');
        m.put(2, 'Second entry');
        System.assert(m.containsKey(1));
        String value = m.get(2);
        System.assertEquals('Second entry', value);
        Set<Integer> s = m.keySet();
    }
    
    public static void sObjectMap(){
        
        List<account> a = [select Id from account];
        Map<ID, Account> m = new Map<ID, Account>();
        
        for(account x: a){
            m.put(x.id, x);
        }
        
        system.debug(m);
        
    }
    
    
    public static void ContactAccountMap(){
        
        list<contact> c = [select id, AccountId from contact where AccountId != NULL];
        Map<ID, Contact> m = new Map<Id,Contact>();
        
        for(contact x: c){
            m.put(x.AccountId, x);
        }
        
        system.debug(m);
        
        
    }
    
    public static void GetApiKey(){
        
        Secure_Api_Key__mdt keys = [select DeveloperName, Publishable_Api_Key__c, Secret_Api_Key__c from Secure_Api_Key__mdt where DeveloperName = 'Second_Key' limit 1];
        
        system.debug(keys.Publishable_Api_Key__c);
        
    }
    
    
}
